{"ast":null,"code":"import axios from \"axios\";\nexport const userLoginAndCheck = user_data => dispatch => {\n  axios.post(\"http://localhost:3001/login\", {\n    username: user_data.username,\n    password: user_data.password\n  }).then(response => {\n    if (response.data.errors) {\n      dispatch({\n        type: 'ERRORS_FOUND',\n        payload: response.data.errors\n      });\n    } else {\n      localStorage.setItem(\"token\", response.data.jwt);\n      dispatch({\n        type: 'USER_SUCCESS',\n        payload: response.data.id\n      });\n    }\n  });\n};\nexport const userSignupAndCheck = user_data => dispatch => {\n  axios.post(\"http://localhost:3001/users\", {\n    username: user_data.username,\n    email: user_data.email,\n    password: user_data.password,\n    password_confirmation: user_data.password_confirmation\n  }).then(response => {\n    if (response.data.errors) {\n      dispatch({\n        type: 'ERRORS_FOUND',\n        payload: response.data.errors\n      });\n    } else {\n      localStorage.setItem(\"token\", response.data.jwt);\n      dispatch({\n        type: 'USER_SUCCESS',\n        payload: response.data.id\n      });\n      axios.get(\"http://localhost:3001/mentees\").then(mentee_response => {\n        dispatch({\n          type: \"GET_MENTEES\",\n          payload: {\n            all_mentees: mentee_response,\n            user_id: response.data.id\n          }\n        });\n      });\n    }\n  });\n};\nexport const changeUserPage = () => dispatch => {\n  dispatch({\n    type: 'CHANGE_PAGE'\n  });\n};\nexport const autoLogin = () => dispatch => {\n  axios.get(\"http://localhost:3001/auto_login\", {\n    headers: {\n      \"Authenticate\": localStorage.token\n    }\n  }).then(resp => {\n    dispatch({\n      type: 'USER_SUCCESS',\n      payload: resp.data.id\n    });\n  });\n};\nexport const userLogout = user_data => dispatch => {\n  localStorage.removeItem(\"token\");\n  dispatch({\n    type: 'LOGOUT'\n  });\n};","map":{"version":3,"sources":["/mnt/c/Users/moust/Documents/Scripts/frontend/src/actions/user.js"],"names":["axios","userLoginAndCheck","user_data","dispatch","post","username","password","then","response","data","errors","type","payload","localStorage","setItem","jwt","id","userSignupAndCheck","email","password_confirmation","get","mentee_response","all_mentees","user_id","changeUserPage","autoLogin","headers","token","resp","userLogout","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,iBAAiB,GAAIC,SAAD,IAAeC,QAAQ,IAAI;AACxDH,EAAAA,KAAK,CAACI,IAAN,CAAW,6BAAX,EAA0C;AAACC,IAAAA,QAAQ,EAAEH,SAAS,CAACG,QAArB;AAA+BC,IAAAA,QAAQ,EAAEJ,SAAS,CAACI;AAAnD,GAA1C,EACCC,IADD,CACMC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,IAAT,CAAcC,MAAlB,EAAyB;AACrBP,MAAAA,QAAQ,CAAC;AAAEQ,QAAAA,IAAI,EAAE,cAAR;AAAwBC,QAAAA,OAAO,EAAEJ,QAAQ,CAACC,IAAT,CAAcC;AAA/C,OAAD,CAAR;AACH,KAFD,MAGK;AACDG,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BN,QAAQ,CAACC,IAAT,CAAcM,GAA5C;AACAZ,MAAAA,QAAQ,CAAC;AAACQ,QAAAA,IAAI,EAAE,cAAP;AAAuBC,QAAAA,OAAO,EAAEJ,QAAQ,CAACC,IAAT,CAAcO;AAA9C,OAAD,CAAR;AACH;AACJ,GATD;AAUH,CAXM;AAaP,OAAO,MAAMC,kBAAkB,GAAIf,SAAD,IAAeC,QAAQ,IAAI;AACzDH,EAAAA,KAAK,CAACI,IAAN,CAAW,6BAAX,EAA0C;AAACC,IAAAA,QAAQ,EAAEH,SAAS,CAACG,QAArB;AAA+Ba,IAAAA,KAAK,EAAEhB,SAAS,CAACgB,KAAhD;AAAuDZ,IAAAA,QAAQ,EAAEJ,SAAS,CAACI,QAA3E;AAAqFa,IAAAA,qBAAqB,EAAEjB,SAAS,CAACiB;AAAtH,GAA1C,EACCZ,IADD,CACMC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,IAAT,CAAcC,MAAlB,EAAyB;AACrBP,MAAAA,QAAQ,CAAC;AAAEQ,QAAAA,IAAI,EAAE,cAAR;AAAwBC,QAAAA,OAAO,EAAEJ,QAAQ,CAACC,IAAT,CAAcC;AAA/C,OAAD,CAAR;AACH,KAFD,MAGK;AACDG,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BN,QAAQ,CAACC,IAAT,CAAcM,GAA5C;AACAZ,MAAAA,QAAQ,CAAC;AAACQ,QAAAA,IAAI,EAAE,cAAP;AAAuBC,QAAAA,OAAO,EAAEJ,QAAQ,CAACC,IAAT,CAAcO;AAA9C,OAAD,CAAR;AACAhB,MAAAA,KAAK,CAACoB,GAAN,CAAU,+BAAV,EACCb,IADD,CACMc,eAAe,IAAI;AAAClB,QAAAA,QAAQ,CAAC;AAACQ,UAAAA,IAAI,EAAE,aAAP;AAAsBC,UAAAA,OAAO,EAAE;AAACU,YAAAA,WAAW,EAAED,eAAd;AAA+BE,YAAAA,OAAO,EAAEf,QAAQ,CAACC,IAAT,CAAcO;AAAtD;AAA/B,SAAD,CAAR;AAAoG,OAD9H;AAEH;AACJ,GAXD;AAYH,CAbM;AAeP,OAAO,MAAMQ,cAAc,GAAG,MAAMrB,QAAQ,IAAI;AAC5CA,EAAAA,QAAQ,CAAC;AAACQ,IAAAA,IAAI,EAAE;AAAP,GAAD,CAAR;AACH,CAFM;AAIP,OAAO,MAAMc,SAAS,GAAG,MAAMtB,QAAQ,IAAI;AACvCH,EAAAA,KAAK,CAACoB,GAAN,CAAU,kCAAV,EAA8C;AAACM,IAAAA,OAAO,EAAE;AAAC,sBAAgBb,YAAY,CAACc;AAA9B;AAAV,GAA9C,EACCpB,IADD,CACMqB,IAAI,IAAI;AACVzB,IAAAA,QAAQ,CAAC;AAACQ,MAAAA,IAAI,EAAE,cAAP;AAAuBC,MAAAA,OAAO,EAAEgB,IAAI,CAACnB,IAAL,CAAUO;AAA1C,KAAD,CAAR;AACH,GAHD;AAIH,CALM;AAOP,OAAO,MAAMa,UAAU,GAAI3B,SAAD,IAAeC,QAAQ,IAAI;AACjDU,EAAAA,YAAY,CAACiB,UAAb,CAAwB,OAAxB;AACA3B,EAAAA,QAAQ,CAAC;AAAEQ,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAR;AACH,CAHM","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const userLoginAndCheck = (user_data) => dispatch => {\r\n    axios.post(\"http://localhost:3001/login\", {username: user_data.username, password: user_data.password})\r\n    .then(response => {\r\n        if (response.data.errors){\r\n            dispatch({ type: 'ERRORS_FOUND', payload: response.data.errors});\r\n        }\r\n        else {\r\n            localStorage.setItem(\"token\", response.data.jwt)\r\n            dispatch({type: 'USER_SUCCESS', payload: response.data.id })\r\n        }\r\n    })\r\n} \r\n\r\nexport const userSignupAndCheck = (user_data) => dispatch => {\r\n    axios.post(\"http://localhost:3001/users\", {username: user_data.username, email: user_data.email, password: user_data.password, password_confirmation: user_data.password_confirmation})\r\n    .then(response => {\r\n        if (response.data.errors){\r\n            dispatch({ type: 'ERRORS_FOUND', payload: response.data.errors});\r\n        }\r\n        else {\r\n            localStorage.setItem(\"token\", response.data.jwt)\r\n            dispatch({type: 'USER_SUCCESS', payload: response.data.id })\r\n            axios.get(\"http://localhost:3001/mentees\")\r\n            .then(mentee_response => {dispatch({type: \"GET_MENTEES\", payload: {all_mentees: mentee_response, user_id: response.data.id}})})\r\n        }\r\n    })\r\n} \r\n\r\nexport const changeUserPage = () => dispatch => {\r\n    dispatch({type: 'CHANGE_PAGE'})\r\n}\r\n\r\nexport const autoLogin = () => dispatch => {\r\n    axios.get(\"http://localhost:3001/auto_login\", {headers: {\"Authenticate\": localStorage.token}})\r\n    .then(resp => {\r\n        dispatch({type: 'USER_SUCCESS', payload: resp.data.id})\r\n    })\r\n}\r\n\r\nexport const userLogout = (user_data) => dispatch => {\r\n    localStorage.removeItem(\"token\");\r\n    dispatch({ type: 'LOGOUT' });\r\n} \r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}