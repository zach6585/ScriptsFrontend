{"ast":null,"code":"import { TEXTS_LOADING, TEXTS_SUCCESS } from '../actions/text';\nconst initialState = {\n  loading: false,\n  error: \"\",\n  curatedTextsFromCurrentScript: null\n};\nexport function changeTextReducer(state, action) {\n  //The purpose of this second reducer is to get the actual value of the text so we change change it and save it here as it's nested \n  switch (action.type) {\n    case 'TEXT_UPDATED':\n      //Note we need a new value quality given to us with our action\n      return { ...state,\n        value: action.payload.value\n      };\n\n    default:\n      return state;\n  }\n}\nexport function textReducer(state = initialState, action) {\n  /*\r\n  This reducer will do two things: \r\n  1) Will update the text values saved to the store so that we don't have to make multiple axios calls and \r\n  2) Will get the initial texts needed in store so that we only have to look through texts with the same script so the time checking isn't as long\r\n  Initial state will be all of the texts that are gotten through axios.\r\n  */\n  switch (action.type) {\n    //Number 2 from above are accomplished through LOADING and SUCCESS\n    case TEXTS_LOADING:\n      return { ...state,\n        loading: true,\n        err: '',\n        curatedTextsFromCurrentScript: null\n      };\n\n    case TEXTS_SUCCESS:\n      return { ...state,\n        loading: false,\n        err: '',\n        curatedTextsFromCurrentScript: action.payload\n      };\n\n    case 'TEXT_UPDATED':\n      //Number 1 from above\n\n      /* We need to return, in our action, a newContent value and its id_tag (Which we will call \"returned_id_tag\" and hopefully this is the way to alter our texts' content \r\n      (Not so sure about the syntax but we'll see) \r\n      */\n      const currentText = this.state.texts.find(text => {\n        return text.id_tag === action.payload.returned_id_tag;\n      });\n      return { ...state,\n        texts: { ...state.texts,\n          currentText: changeTextReducer(currentText, action)\n        }\n      };\n    //Here we will have to have given the action a new text value which would be easy to get\n\n    case 'CHANGE_SCRIPT':\n      return { ...state,\n        curatedTextsFromCurrentScript: null\n      };\n\n    default:\n      // If the reducer doesn't care about this action type,\n      // return the existing state unchanged\n      return state;\n  }\n}","map":{"version":3,"sources":["/mnt/c/Users/moust/Documents/Scripts/frontend/src/reducers/textreducer.js"],"names":["TEXTS_LOADING","TEXTS_SUCCESS","initialState","loading","error","curatedTextsFromCurrentScript","changeTextReducer","state","action","type","value","payload","textReducer","err","currentText","texts","find","text","id_tag","returned_id_tag"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,aAAxB,QAA6C,iBAA7C;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,KADU;AAEnBC,EAAAA,KAAK,EAAE,EAFY;AAGnBC,EAAAA,6BAA6B,EAAE;AAHZ,CAArB;AAMA,OAAO,SAASC,iBAAT,CAA2BC,KAA3B,EAAkCC,MAAlC,EAAyC;AAC5C;AACA,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,cAAL;AACI;AACA,aAAO,EAAC,GAAGF,KAAJ;AAAWG,QAAAA,KAAK,EAAEF,MAAM,CAACG,OAAP,CAAeD;AAAjC,OAAP;;AACJ;AACI,aAAOH,KAAP;AALR;AAOH;AAED,OAAO,SAASK,WAAT,CAAqBL,KAAK,GAAGL,YAA7B,EAA2CM,MAA3C,EAAmD;AACtD;AACJ;AACA;AACA;AACA;AACA;AACI,UAAQA,MAAM,CAACC,IAAf;AACE;AACA,SAAKT,aAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELJ,QAAAA,OAAO,EAAE,IAFJ;AAGLU,QAAAA,GAAG,EAAE,EAHA;AAILR,QAAAA,6BAA6B,EAAE;AAJ1B,OAAP;;AAOF,SAAKJ,aAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELJ,QAAAA,OAAO,EAAE,KAFJ;AAGLU,QAAAA,GAAG,EAAE,EAHA;AAILR,QAAAA,6BAA6B,EAAEG,MAAM,CAACG;AAJjC,OAAP;;AAOF,SAAK,cAAL;AAAqB;;AACnB;AACR;AACA;AACO,YAAMG,WAAW,GAAG,KAAKP,KAAL,CAAWQ,KAAX,CAAiBC,IAAjB,CAAsBC,IAAI,IAAI;AAAC,eAAOA,IAAI,CAACC,MAAL,KAAgBV,MAAM,CAACG,OAAP,CAAeQ,eAAtC;AAAsD,OAArF,CAApB;AACC,aAAO,EAAE,GAAGZ,KAAL;AAAYQ,QAAAA,KAAK,EAAE,EAAC,GAAGR,KAAK,CAACQ,KAAV;AAAiBD,UAAAA,WAAW,EAAER,iBAAiB,CAACQ,WAAD,EAAcN,MAAd;AAA/C;AAAnB,OAAP;AAAkG;;AACpG,SAAK,eAAL;AACE,aAAM,EACJ,GAAGD,KADC;AAEJF,QAAAA,6BAA6B,EAAE;AAF3B,OAAN;;AAKF;AACE;AACA;AACA,aAAOE,KAAP;AAjCJ;AAmCD","sourcesContent":["import { TEXTS_LOADING, TEXTS_SUCCESS } from '../actions/text';\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  error: \"\",\r\n  curatedTextsFromCurrentScript: null\r\n}\r\n\r\nexport function changeTextReducer(state, action){\r\n    //The purpose of this second reducer is to get the actual value of the text so we change change it and save it here as it's nested \r\n    switch(action.type) {\r\n        case 'TEXT_UPDATED':\r\n            //Note we need a new value quality given to us with our action\r\n            return {...state, value: action.payload.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport function textReducer(state = initialState, action) {\r\n    /*\r\n    This reducer will do two things: \r\n    1) Will update the text values saved to the store so that we don't have to make multiple axios calls and \r\n    2) Will get the initial texts needed in store so that we only have to look through texts with the same script so the time checking isn't as long\r\n    Initial state will be all of the texts that are gotten through axios.\r\n    */\r\n    switch (action.type) {\r\n      //Number 2 from above are accomplished through LOADING and SUCCESS\r\n      case TEXTS_LOADING:\r\n        return {\r\n          ...state,\r\n          loading: true,\r\n          err: '',\r\n          curatedTextsFromCurrentScript: null\r\n\r\n        }\r\n      case TEXTS_SUCCESS:\r\n        return {\r\n          ...state,\r\n          loading: false,\r\n          err: '',\r\n          curatedTextsFromCurrentScript: action.payload\r\n        }\r\n\r\n      case 'TEXT_UPDATED': //Number 1 from above\r\n        /* We need to return, in our action, a newContent value and its id_tag (Which we will call \"returned_id_tag\" and hopefully this is the way to alter our texts' content \r\n        (Not so sure about the syntax but we'll see) \r\n        */\r\n       const currentText = this.state.texts.find(text => {return text.id_tag === action.payload.returned_id_tag})\r\n        return { ...state, texts: {...state.texts, currentText: changeTextReducer(currentText, action)} } //Here we will have to have given the action a new text value which would be easy to get\r\n      case 'CHANGE_SCRIPT':\r\n        return{\r\n          ...state,\r\n          curatedTextsFromCurrentScript: null\r\n        }\r\n      \r\n      default:\r\n        // If the reducer doesn't care about this action type,\r\n        // return the existing state unchanged\r\n        return state\r\n    }\r\n  }\r\n\r\n"]},"metadata":{},"sourceType":"module"}