{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/moust/Documents/Scripts/frontend/src/components/scripts/dummy script/pages/generalpage.js\";\nimport { Component } from 'react';\nimport ContentEditable from 'react-contenteditable';\nimport { connect } from 'react-redux';\nimport { submitButtonClicked } from '../../../../actions/pages/submitClicked';\nimport { postOrPatchTexts } from '../../../../actions/text/textChangeAxiosCallAction';\nimport '../../allScripts.css';\nimport larrow from \"../../pictures/larrow.png\";\nimport rarrow from \"../../pictures/rarrow.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass GeneralPageRenderer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      page: null,\n      page_content: null,\n      submitButton: null,\n      pageNum: 1,\n      texts: this.props.texts\n    };\n\n    this.getPageDetails = pageNumber => {\n      this.setState({\n        page: null,\n        page_content: null\n      }); //This function sets the state of page and pagedetails based on the number it's fed\n\n      const pageData = this.props.pages.find(page_data => {\n        return page_data.page_number === pageNumber.toString();\n      }); // console.log(pageData);\n\n      this.setState({\n        page: pageData,\n        page_content: pageData.content\n      });\n    };\n\n    this.handleContentClicked = event => {\n      this.setState({\n        submitButton: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: event => this.handleContentEditedSubmit(event),\n          className: \"website_change_submit_button\",\n          children: \"Submit Changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 38\n        }, this)\n      });\n    };\n\n    this.handlePageButtonClick = letter => {\n      //This determines which page change button was pressed\n      if (letter === 'b') {\n        this.getPageDetails(this.state.pageNum - 1);\n        this.setState(prevState => ({\n          pageNum: prevState.pageNum - 1\n        }));\n      } else {\n        this.getPageDetails(this.state.pageNum + 1);\n        this.setState(prevState => ({\n          pageNum: prevState.pageNum + 1\n        }));\n      }\n    };\n\n    this.handleContentEditedSubmit = event => {\n      event.preventDefault();\n      this.props.submitButtonClicked({\n        page: this.state.page,\n        content: this.state.page_content\n      });\n      this.setState({\n        submitButton: null\n      });\n    };\n\n    this.handleTextChange = event => {\n      //When the texts change, this is where it goes\n      this.props.postOrPatchTexts({\n        text: this.state.texts,\n        current_text: event.target\n      });\n    };\n\n    this.handleChangeInContentEditable = event => {\n      this.setState({\n        page_content: event.target.value\n      });\n    };\n\n    this.getValue = id => {\n      //Gets the value of the textbox.\n      for (const i in this.state.texts) {\n        if (this.state.texts[i].id_tag === id) {\n          return this.state.texts[i].value;\n        }\n      }\n\n      return \"\";\n    };\n  }\n\n  componentDidMount() {\n    // console.log(this.props)\n    //For now, this is set. In the future, we will need to convey some way to suggest that something is changing and thus we will need to \n    //Account for that by way of a reducer/action\n    console.log(this.props.pages);\n    this.getPageDetails(1);\n  }\n\n  render() {\n    if (this.state.content === null) {\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(ContentEditable, {\n          onClick: event => this.handleContentClicked(),\n          onChange: event => this.handleChangeInContentEditable(event),\n          html: this.state.page_content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }, this), this.state.submitButton, /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"buttonDiv\",\n          children: [this.state.pageNum === 1 ? null : /*#__PURE__*/_jsxDEV(\"img\", {\n            alt: \"left arrow back\",\n            src: larrow,\n            onClick: () => this.handlePageButtonClick('b'),\n            className: \"left arrow button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 57\n          }, this), this.state.pageNum === this.props.pages.length ? null : /*#__PURE__*/_jsxDEV(\"img\", {\n            alt: \"right arrow forward\",\n            src: rarrow,\n            onClick: () => this.handlePageButtonClick('f'),\n            className: \"right arrow button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 79\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"page_num\",\n          children: this.state.pageNum\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this);\n    }\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    submitButtonClicked: page_details => dispatch(submitButtonClicked(page_details)),\n    postOrPatchTexts: texts_details => dispatch(postOrPatchTexts(texts_details))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(GeneralPageRenderer);\n/* \r\nNotes for this page: Need to make it so that textboxes are ignored for the content editable thing since we need those to be entered.\r\nI can ask Ariel next time I see her which one of my two ideas (which are coming after this) she wants:\r\n1) I pass an argument in to the handleContentClicked function that determines the type of the element so it doesn't proc when on certain things or\r\n2) I make a menu in the top left (Honestly I think ultimately this is what I want since the whole flow would make more sense this way) that\r\ngives the option to make changes so that it isn't just the second you click anywhere\r\n\r\n- If I choose number 2 (which I think I will), I will make it so that there's an if else in the render that determines if it's\r\ncontent editable or not\r\n*/","map":{"version":3,"sources":["/mnt/c/Users/moust/Documents/Scripts/frontend/src/components/scripts/dummy script/pages/generalpage.js"],"names":["Component","ContentEditable","connect","submitButtonClicked","postOrPatchTexts","larrow","rarrow","GeneralPageRenderer","state","page","page_content","submitButton","pageNum","texts","props","getPageDetails","pageNumber","setState","pageData","pages","find","page_data","page_number","toString","content","handleContentClicked","event","handleContentEditedSubmit","handlePageButtonClick","letter","prevState","preventDefault","handleTextChange","text","current_text","target","handleChangeInContentEditable","value","getValue","id","i","id_tag","componentDidMount","console","log","render","length","mapDispatchToProps","dispatch","page_details","texts_details"],"mappings":"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","sourcesContent":["import {Component} from 'react';\r\nimport ContentEditable from 'react-contenteditable';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { submitButtonClicked } from '../../../../actions/pages/submitClicked';\r\nimport { postOrPatchTexts } from '../../../../actions/text/textChangeAxiosCallAction';\r\nimport '../../allScripts.css';\r\n\r\nimport larrow from \"../../pictures/larrow.png\";\r\nimport rarrow from \"../../pictures/rarrow.png\";\r\n\r\nclass GeneralPageRenderer extends Component{\r\n    \r\n    state = {\r\n        page: null,\r\n        page_content: null,\r\n        submitButton: null,\r\n        pageNum: 1,\r\n        texts: this.props.texts\r\n    }\r\n    componentDidMount(){\r\n        // console.log(this.props)\r\n        //For now, this is set. In the future, we will need to convey some way to suggest that something is changing and thus we will need to \r\n        //Account for that by way of a reducer/action\r\n        console.log(this.props.pages)\r\n        this.getPageDetails(1)\r\n        \r\n    }\r\n\r\n    getPageDetails = (pageNumber) => {\r\n        this.setState({page: null, page_content: null})\r\n        //This function sets the state of page and pagedetails based on the number it's fed\r\n        const pageData = this.props.pages.find(page_data => {return page_data.page_number === pageNumber.toString()})\r\n        // console.log(pageData);\r\n        this.setState({page: pageData, page_content: pageData.content})\r\n    }\r\n\r\n    handleContentClicked = (event) => {\r\n        this.setState({submitButton: <button onClick={event => this.handleContentEditedSubmit(event)} className=\"website_change_submit_button\">Submit Changes</button>})\r\n    }\r\n\r\n    handlePageButtonClick = (letter) => {//This determines which page change button was pressed\r\n        if (letter === 'b'){\r\n            this.getPageDetails(this.state.pageNum - 1)\r\n            this.setState((prevState) => ({pageNum: prevState.pageNum - 1}))\r\n          \r\n        }\r\n        else {\r\n            this.getPageDetails(this.state.pageNum + 1)\r\n            this.setState((prevState) => ({pageNum: prevState.pageNum + 1}))\r\n        }\r\n        \r\n      }\r\n    \r\n\r\n    handleContentEditedSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.submitButtonClicked({page: this.state.page, content: this.state.page_content});\r\n        this.setState({submitButton: null})\r\n    }\r\n\r\n    handleTextChange = (event) => {\r\n        //When the texts change, this is where it goes\r\n        this.props.postOrPatchTexts({text: this.state.texts, current_text: event.target})\r\n    }\r\n\r\n    handleChangeInContentEditable = (event) => {\r\n        this.setState({page_content: event.target.value})\r\n    }\r\n\r\n    getValue = (id) => {\r\n        //Gets the value of the textbox.\r\n        for (const i in this.state.texts){\r\n            if (this.state.texts[i].id_tag === id){\r\n                return this.state.texts[i].value;\r\n            }\r\n        }\r\n        return \"\"\r\n    }\r\n\r\n    render(){\r\n        if (this.state.content === null){\r\n            return(\r\n                <h1>Loading</h1>\r\n            )\r\n        }\r\n        else{\r\n        return(\r\n            <div>\r\n                <ContentEditable onClick={event => this.handleContentClicked()} onChange={event => this.handleChangeInContentEditable(event)} html={this.state.page_content} />\r\n                {this.state.submitButton}\r\n                <div id=\"buttonDiv\">\r\n                    {this.state.pageNum === 1 ? null :  <img alt=\"left arrow back\" src={larrow} onClick={() => this.handlePageButtonClick('b')} className=\"left arrow button\"/>}\r\n                    {this.state.pageNum === this.props.pages.length ? null :  <img alt=\"right arrow forward\" src={rarrow} onClick={() => this.handlePageButtonClick('f')} className=\"right arrow button\"/>}\r\n                </div>\r\n                <h3 className=\"page_num\">{this.state.pageNum}</h3>\r\n            </div>\r\n        )\r\n        }\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        submitButtonClicked: (page_details) => dispatch(submitButtonClicked(page_details)),\r\n        postOrPatchTexts: (texts_details) => dispatch(postOrPatchTexts(texts_details))\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(GeneralPageRenderer);\r\n\r\n/* \r\nNotes for this page: Need to make it so that textboxes are ignored for the content editable thing since we need those to be entered.\r\nI can ask Ariel next time I see her which one of my two ideas (which are coming after this) she wants:\r\n1) I pass an argument in to the handleContentClicked function that determines the type of the element so it doesn't proc when on certain things or\r\n2) I make a menu in the top left (Honestly I think ultimately this is what I want since the whole flow would make more sense this way) that\r\ngives the option to make changes so that it isn't just the second you click anywhere\r\n\r\n- If I choose number 2 (which I think I will), I will make it so that there's an if else in the render that determines if it's\r\ncontent editable or not\r\n*/\r\n\r\n\r\n  "]},"metadata":{},"sourceType":"module"}