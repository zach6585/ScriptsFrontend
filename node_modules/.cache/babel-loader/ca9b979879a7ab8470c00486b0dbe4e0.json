{"ast":null,"code":"import { PAGES_LOADING, PAGES_SUCCESS } from '../actions/pages/pagesAxiosCallAction';\nconst initialState = {\n  loading: false,\n  error: \"\",\n  pagesChosen: null,\n  submitButtonStatus: false,\n  currentPage: null //This will be used to alter the data when submitting\n\n};\nexport default function pageReducer(state = initialState, action) {\n  /*\r\n  This reducer will do two things (Based on two separate actions): \r\n  1) Will deal with the submit button being rendered or not and \r\n  2) Will give the option (when we ultimately implement the functionality of letting them decide \r\n      to change the script they're working on without reloading the app alltogether) to change which script they're looking at\r\n  Initial state will be the single state chosen by button press.\r\n  */\n  switch (action.type) {\n    //Number 2 from above is accomplished through LOADING and SUCCESS\n    case PAGES_LOADING:\n      return { ...state,\n        loading: true,\n        err: '',\n        pagesChosen: null\n      };\n\n    case PAGES_SUCCESS:\n      return { ...state,\n        loading: false,\n        err: '',\n        pagesChosen: action.payload\n      };\n    //Number 1 from above is accomplished through CONTENTEDITABLE_CLICKED and PAGE_CHANGE_SUBMITTED\n\n    case 'CONTENTEDITABLE_CLICKED':\n      //This will be when the content editable thing will be clicked. It will make it so button is displayed\n      return { ...state,\n        submitButtonStatus: true\n      };\n\n    case 'PAGE_CHANGE_SUBMITTED':\n      //Number 1 from above\n\n      /* We need to return, in our action, a newContent value and hopefully this is the way to alter our pages' content \r\n      (Not so sure about the syntax but we'll see) \r\n      */\n      return { ...state,\n        submitButtonStatus: false\n      };\n\n    default:\n      // If the reducer doesn't care about this action type,\n      // return the existing state unchanged\n      return state;\n  }\n}","map":{"version":3,"sources":["/mnt/c/Users/moust/Documents/Scripts/frontend/src/reducers/pagereducer.js"],"names":["PAGES_LOADING","PAGES_SUCCESS","initialState","loading","error","pagesChosen","submitButtonStatus","currentPage","pageReducer","state","action","type","err","payload"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,aAAxB,QAA6C,uCAA7C;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,KADU;AAEnBC,EAAAA,KAAK,EAAE,EAFY;AAGnBC,EAAAA,WAAW,EAAE,IAHM;AAInBC,EAAAA,kBAAkB,EAAE,KAJD;AAKnBC,EAAAA,WAAW,EAAE,IALM,CAKD;;AALC,CAArB;AAUA,eAAe,SAASC,WAAT,CAAqBC,KAAK,GAAGP,YAA7B,EAA2CQ,MAA3C,EAAmD;AAC9D;AACJ;AACA;AACA;AACA;AACA;AACA;AACI,UAAQA,MAAM,CAACC,IAAf;AACE;AACA,SAAKX,aAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELN,QAAAA,OAAO,EAAE,IAFJ;AAGLS,QAAAA,GAAG,EAAE,EAHA;AAILP,QAAAA,WAAW,EAAE;AAJR,OAAP;;AAOF,SAAKJ,aAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELN,QAAAA,OAAO,EAAE,KAFJ;AAGLS,QAAAA,GAAG,EAAE,EAHA;AAILP,QAAAA,WAAW,EAAEK,MAAM,CAACG;AAJf,OAAP;AAOF;;AACA,SAAK,yBAAL;AACE;AACA,aAAO,EAAC,GAAGJ,KAAJ;AAAWH,QAAAA,kBAAkB,EAAE;AAA/B,OAAP;;AACF,SAAK,uBAAL;AAA8B;;AAC5B;AACR;AACA;AACO,aAAO,EAAC,GAAGG,KAAJ;AAAWH,QAAAA,kBAAkB,EAAE;AAA/B,OAAP;;AAED;AACE;AACA;AACA,aAAOG,KAAP;AA/BJ;AAiCD","sourcesContent":["import { PAGES_LOADING, PAGES_SUCCESS } from '../actions/pages/pagesAxiosCallAction';\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  error: \"\",\r\n  pagesChosen: null,\r\n  submitButtonStatus: false,\r\n  currentPage: null //This will be used to alter the data when submitting\r\n}\r\n\r\n\r\n\r\nexport default function pageReducer(state = initialState, action) {\r\n    /*\r\n    This reducer will do two things (Based on two separate actions): \r\n    1) Will deal with the submit button being rendered or not and \r\n    2) Will give the option (when we ultimately implement the functionality of letting them decide \r\n        to change the script they're working on without reloading the app alltogether) to change which script they're looking at\r\n    Initial state will be the single state chosen by button press.\r\n    */\r\n    switch (action.type) {\r\n      //Number 2 from above is accomplished through LOADING and SUCCESS\r\n      case PAGES_LOADING:\r\n        return {\r\n          ...state, \r\n          loading: true,\r\n          err: '',\r\n          pagesChosen: null\r\n\r\n        }\r\n      case PAGES_SUCCESS:\r\n        return {\r\n          ...state,\r\n          loading: false,\r\n          err: '',\r\n          pagesChosen: action.payload\r\n        }\r\n\r\n      //Number 1 from above is accomplished through CONTENTEDITABLE_CLICKED and PAGE_CHANGE_SUBMITTED\r\n      case 'CONTENTEDITABLE_CLICKED': \r\n        //This will be when the content editable thing will be clicked. It will make it so button is displayed\r\n        return({...state, submitButtonStatus: true}) \r\n      case 'PAGE_CHANGE_SUBMITTED': //Number 1 from above\r\n        /* We need to return, in our action, a newContent value and hopefully this is the way to alter our pages' content \r\n        (Not so sure about the syntax but we'll see) \r\n        */\r\n       return {...state, submitButtonStatus: false}\r\n       \r\n      default:\r\n        // If the reducer doesn't care about this action type,\r\n        // return the existing state unchanged\r\n        return state\r\n    }\r\n  }"]},"metadata":{},"sourceType":"module"}