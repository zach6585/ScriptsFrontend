{"ast":null,"code":"import { TEXTS_LOADING, TEXTS_SUCCESS } from '../actions/text';\nimport update from 'react-addons-update';\nconst initialState = {\n  loading: false,\n  error: \"\",\n  curatedTextsFromCurrentScript: null\n};\nexport function textReducer(state = initialState, action) {\n  /*\r\n  This reducer will do two things: \r\n  1) Will update the text values saved to the store so that we don't have to make multiple axios calls and \r\n  2) Will get the initial texts needed in store so that we only have to look through texts with the same script so the time checking isn't as long\r\n  Initial state will be all of the texts that are gotten through axios.\r\n  */\n  switch (action.type) {\n    //Number 2 from above are accomplished through LOADING and SUCCESS\n    case TEXTS_LOADING:\n      return { ...state,\n        loading: true,\n        err: '',\n        curatedTextsFromCurrentScript: null\n      };\n\n    case TEXTS_SUCCESS:\n      return { ...state,\n        loading: false,\n        err: '',\n        curatedTextsFromCurrentScript: action.payload\n      };\n\n    case 'TEXT_UPDATED':\n      //Number 1 from above\n      return {};\n    //Here we will have to have given the action a new text value which would be easy to get\n\n    case 'TEXT_CREATED':\n      //Also number 1 from above but for posting instead of patching\n      return { ...state,\n        curatedTextsFromCurrentScript: [...state.curatedTextsFromCurrentScript, action.payload]\n      };\n\n    case 'CHANGE_SCRIPT':\n      return { ...state,\n        curatedTextsFromCurrentScript: null\n      };\n\n    default:\n      // If the reducer doesn't care about this action type,\n      // return the existing state unchanged\n      return state;\n  }\n}","map":{"version":3,"sources":["/mnt/c/Users/moust/Documents/Scripts/frontend/src/reducers/textreducer.js"],"names":["TEXTS_LOADING","TEXTS_SUCCESS","update","initialState","loading","error","curatedTextsFromCurrentScript","textReducer","state","action","type","err","payload"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,aAAxB,QAA6C,iBAA7C;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,KADU;AAEnBC,EAAAA,KAAK,EAAE,EAFY;AAGnBC,EAAAA,6BAA6B,EAAE;AAHZ,CAArB;AAMA,OAAO,SAASC,WAAT,CAAqBC,KAAK,GAAGL,YAA7B,EAA2CM,MAA3C,EAAmD;AACtD;AACJ;AACA;AACA;AACA;AACA;AACI,UAAQA,MAAM,CAACC,IAAf;AACE;AACA,SAAKV,aAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELJ,QAAAA,OAAO,EAAE,IAFJ;AAGLO,QAAAA,GAAG,EAAE,EAHA;AAILL,QAAAA,6BAA6B,EAAE;AAJ1B,OAAP;;AAOF,SAAKL,aAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELJ,QAAAA,OAAO,EAAE,KAFJ;AAGLO,QAAAA,GAAG,EAAE,EAHA;AAILL,QAAAA,6BAA6B,EAAEG,MAAM,CAACG;AAJjC,OAAP;;AAOF,SAAK,cAAL;AAAqB;AACnB,aAAO,EAAP;AACG;;AAEH,SAAK,cAAL;AAAqB;AACrB,aAAO,EACL,GAAGJ,KADE;AAELF,QAAAA,6BAA6B,EAAE,CAAC,GAAGE,KAAK,CAACF,6BAAV,EAAyCG,MAAM,CAACG,OAAhD;AAF1B,OAAP;;AAKA,SAAK,eAAL;AACA,aAAM,EACJ,GAAGJ,KADC;AAEJF,QAAAA,6BAA6B,EAAE;AAF3B,OAAN;;AAKF;AACE;AACA;AACA,aAAOE,KAAP;AArCJ;AAuCD","sourcesContent":["import { TEXTS_LOADING, TEXTS_SUCCESS } from '../actions/text';\r\nimport update from 'react-addons-update';\r\nconst initialState = {\r\n  loading: false,\r\n  error: \"\",\r\n  curatedTextsFromCurrentScript: null\r\n}\r\n\r\nexport function textReducer(state = initialState, action) {\r\n    /*\r\n    This reducer will do two things: \r\n    1) Will update the text values saved to the store so that we don't have to make multiple axios calls and \r\n    2) Will get the initial texts needed in store so that we only have to look through texts with the same script so the time checking isn't as long\r\n    Initial state will be all of the texts that are gotten through axios.\r\n    */\r\n    switch (action.type) {\r\n      //Number 2 from above are accomplished through LOADING and SUCCESS\r\n      case TEXTS_LOADING:\r\n        return {\r\n          ...state,\r\n          loading: true,\r\n          err: '',\r\n          curatedTextsFromCurrentScript: null\r\n\r\n        }\r\n      case TEXTS_SUCCESS:\r\n        return {\r\n          ...state,\r\n          loading: false,\r\n          err: '',\r\n          curatedTextsFromCurrentScript: action.payload\r\n        }\r\n\r\n      case 'TEXT_UPDATED': //Number 1 from above\r\n        return {\r\n         } //Here we will have to have given the action a new text value which would be easy to get\r\n      \r\n        case 'TEXT_CREATED': //Also number 1 from above but for posting instead of patching\r\n        return {\r\n          ...state, \r\n          curatedTextsFromCurrentScript: [...state.curatedTextsFromCurrentScript, action.payload]\r\n        }\r\n      \r\n        case 'CHANGE_SCRIPT':\r\n        return{\r\n          ...state,\r\n          curatedTextsFromCurrentScript: null\r\n        }\r\n      \r\n      default:\r\n        // If the reducer doesn't care about this action type,\r\n        // return the existing state unchanged\r\n        return state\r\n    }\r\n  }\r\n\r\n"]},"metadata":{},"sourceType":"module"}