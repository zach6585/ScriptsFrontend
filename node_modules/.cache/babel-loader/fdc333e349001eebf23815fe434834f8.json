{"ast":null,"code":"const initialState = {\n  pageNumber: 1\n};\nexport function pageReducer(state = initialState, action) {\n  /*\r\n  This reducer is very simple. Its sole job is to mark which page you're on. This will allow things like buttons that take you\r\n  to pages other than the one before or after as well as will serve as the means of the buttons taking you to the next page.\r\n  */\n  switch (action.type) {\n    //Number 2 from above are accomplished through LOADING and SUCCESS\n    case TEXTS_LOADING:\n      return { ...state,\n        loading: true,\n        err: '',\n        curatedTextsFromCurrentScript: null\n      };\n\n    case TEXTS_SUCCESS:\n      return { ...state,\n        loading: false,\n        err: '',\n        curatedTextsFromCurrentScript: action.payload\n      };\n\n    case 'TEXT_UPDATED':\n      //Number 1 from above\n\n      /* We need to return, in our action, a newContent value and its id_tag (Which we will call \"returned_id_tag\" and hopefully this is the way to alter our texts' content \r\n      (Not so sure about the syntax but we'll see) \r\n      */\n      const currentText = this.state.texts.find(text => {\n        return text.id_tag === action.payload.returned_id_tag;\n      });\n      return { ...state,\n        texts: { ...state.texts,\n          currentText: changeTextReducer(currentText, action)\n        }\n      };\n    //Here we will have to have given the action a new text value which would be easy to get\n\n    case 'CHANGE_SCRIPT':\n      return { ...state,\n        curatedTextsFromCurrentScript: null\n      };\n\n    default:\n      // If the reducer doesn't care about this action type,\n      // return the existing state unchanged\n      return state;\n  }\n}","map":{"version":3,"sources":["/mnt/c/Users/moust/Documents/Scripts/frontend/src/reducers/pagereducer.js"],"names":["initialState","pageNumber","pageReducer","state","action","type","TEXTS_LOADING","loading","err","curatedTextsFromCurrentScript","TEXTS_SUCCESS","payload","currentText","texts","find","text","id_tag","returned_id_tag","changeTextReducer"],"mappings":"AACA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE;AADO,CAArB;AAKA,OAAO,SAASC,WAAT,CAAqBC,KAAK,GAAGH,YAA7B,EAA2CI,MAA3C,EAAmD;AACtD;AACJ;AACA;AACA;AACI,UAAQA,MAAM,CAACC,IAAf;AACE;AACA,SAAKC,aAAL;AACE,aAAO,EACL,GAAGH,KADE;AAELI,QAAAA,OAAO,EAAE,IAFJ;AAGLC,QAAAA,GAAG,EAAE,EAHA;AAILC,QAAAA,6BAA6B,EAAE;AAJ1B,OAAP;;AAOF,SAAKC,aAAL;AACE,aAAO,EACL,GAAGP,KADE;AAELI,QAAAA,OAAO,EAAE,KAFJ;AAGLC,QAAAA,GAAG,EAAE,EAHA;AAILC,QAAAA,6BAA6B,EAAEL,MAAM,CAACO;AAJjC,OAAP;;AAOF,SAAK,cAAL;AAAqB;;AACnB;AACR;AACA;AACO,YAAMC,WAAW,GAAG,KAAKT,KAAL,CAAWU,KAAX,CAAiBC,IAAjB,CAAsBC,IAAI,IAAI;AAAC,eAAOA,IAAI,CAACC,MAAL,KAAgBZ,MAAM,CAACO,OAAP,CAAeM,eAAtC;AAAsD,OAArF,CAApB;AACC,aAAO,EAAE,GAAGd,KAAL;AAAYU,QAAAA,KAAK,EAAE,EAAC,GAAGV,KAAK,CAACU,KAAV;AAAiBD,UAAAA,WAAW,EAAEM,iBAAiB,CAACN,WAAD,EAAcR,MAAd;AAA/C;AAAnB,OAAP;AAAkG;;AACpG,SAAK,eAAL;AACE,aAAM,EACJ,GAAGD,KADC;AAEJM,QAAAA,6BAA6B,EAAE;AAF3B,OAAN;;AAKF;AACE;AACA;AACA,aAAON,KAAP;AAjCJ;AAmCD","sourcesContent":["\r\nconst initialState = {\r\n  pageNumber: 1\r\n}\r\n\r\n\r\nexport function pageReducer(state = initialState, action) {\r\n    /*\r\n    This reducer is very simple. Its sole job is to mark which page you're on. This will allow things like buttons that take you\r\n    to pages other than the one before or after as well as will serve as the means of the buttons taking you to the next page.\r\n    */\r\n    switch (action.type) {\r\n      //Number 2 from above are accomplished through LOADING and SUCCESS\r\n      case TEXTS_LOADING:\r\n        return {\r\n          ...state,\r\n          loading: true,\r\n          err: '',\r\n          curatedTextsFromCurrentScript: null\r\n\r\n        }\r\n      case TEXTS_SUCCESS:\r\n        return {\r\n          ...state,\r\n          loading: false,\r\n          err: '',\r\n          curatedTextsFromCurrentScript: action.payload\r\n        }\r\n\r\n      case 'TEXT_UPDATED': //Number 1 from above\r\n        /* We need to return, in our action, a newContent value and its id_tag (Which we will call \"returned_id_tag\" and hopefully this is the way to alter our texts' content \r\n        (Not so sure about the syntax but we'll see) \r\n        */\r\n       const currentText = this.state.texts.find(text => {return text.id_tag === action.payload.returned_id_tag})\r\n        return { ...state, texts: {...state.texts, currentText: changeTextReducer(currentText, action)} } //Here we will have to have given the action a new text value which would be easy to get\r\n      case 'CHANGE_SCRIPT':\r\n        return{\r\n          ...state,\r\n          curatedTextsFromCurrentScript: null\r\n        }\r\n      \r\n      default:\r\n        // If the reducer doesn't care about this action type,\r\n        // return the existing state unchanged\r\n        return state\r\n    }\r\n  }\r\n\r\n"]},"metadata":{},"sourceType":"module"}