{"ast":null,"code":"const initialState = {\n  token: null,\n  error: \"\"\n};\nexport default function userReducer(state = initialState, action) {\n  /*\r\n  This reducer will do one thing (Based on two separate actions):\r\n  1) Loads up only the pages pertaining to the script chosen\r\n  \r\n  */\n  switch (action.type) {\n    //Number 1 from above is accomplished through LOADING and SUCCESS\n    case 'ERRORS_FOUND':\n      return {};\n\n    case 'USER_SUCCESS':\n      return { ...state,\n        loading: false,\n        err: '',\n        pagesChosen: action.payload\n      };\n    //Number 1 from above is accomplished through CONTENTEDITABLE_CLICKED and PAGE_CHANGE_SUBMITTED\n    // case 'CONTENTEDITABLE_CLICKED': \n    //   //This will be when the content editable thing will be clicked. It will make it so button is displayed\n    //   return({...state, submitButtonStatus: true}) \n    // case 'PAGE_CHANGE_SUBMITTED': //Number 1 from above\n    //   /* We need to return, in our action, a newContent value and hopefully this is the way to alter our pages' content \n    //   (Not so sure about the syntax but we'll see) \n    //   */\n    //  return {...state, submitButtonStatus: false}\n\n    default:\n      // If the reducer doesn't care about this action type,\n      // return the existing state unchanged\n      return state;\n  }\n}","map":{"version":3,"sources":["/mnt/c/Users/moust/Documents/Scripts/frontend/src/reducers/userreducer.js"],"names":["initialState","token","error","userReducer","state","action","type","loading","err","pagesChosen","payload"],"mappings":"AAAA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,IADY;AAEnBC,EAAAA,KAAK,EAAE;AAFY,CAArB;AAOA,eAAe,SAASC,WAAT,CAAqBC,KAAK,GAAGJ,YAA7B,EAA2CK,MAA3C,EAAmD;AAC9D;AACJ;AACA;AACA;AACA;AACI,UAAQA,MAAM,CAACC,IAAf;AACE;AACA,SAAK,cAAL;AACI,aAAM,EAAN;;AAGJ,SAAK,cAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELG,QAAAA,OAAO,EAAE,KAFJ;AAGLC,QAAAA,GAAG,EAAE,EAHA;AAILC,QAAAA,WAAW,EAAEJ,MAAM,CAACK;AAJf,OAAP;AAOF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACE;AACA;AACA,aAAON,KAAP;AA3BJ;AA6BD","sourcesContent":["const initialState = {\r\n  token: null,\r\n  error: \"\"\r\n}\r\n\r\n\r\n\r\nexport default function userReducer(state = initialState, action) {\r\n    /*\r\n    This reducer will do one thing (Based on two separate actions):\r\n    1) Loads up only the pages pertaining to the script chosen\r\n    \r\n    */\r\n    switch (action.type) {\r\n      //Number 1 from above is accomplished through LOADING and SUCCESS\r\n      case 'ERRORS_FOUND':\r\n          return{\r\n              \r\n          }\r\n      case 'USER_SUCCESS':\r\n        return {\r\n          ...state,\r\n          loading: false,\r\n          err: '',\r\n          pagesChosen: action.payload\r\n        }\r\n\r\n      //Number 1 from above is accomplished through CONTENTEDITABLE_CLICKED and PAGE_CHANGE_SUBMITTED\r\n      // case 'CONTENTEDITABLE_CLICKED': \r\n      //   //This will be when the content editable thing will be clicked. It will make it so button is displayed\r\n      //   return({...state, submitButtonStatus: true}) \r\n      // case 'PAGE_CHANGE_SUBMITTED': //Number 1 from above\r\n      //   /* We need to return, in our action, a newContent value and hopefully this is the way to alter our pages' content \r\n      //   (Not so sure about the syntax but we'll see) \r\n      //   */\r\n      //  return {...state, submitButtonStatus: false}\r\n       \r\n      default:\r\n        // If the reducer doesn't care about this action type,\r\n        // return the existing state unchanged\r\n        return state\r\n    }\r\n  }"]},"metadata":{},"sourceType":"module"}