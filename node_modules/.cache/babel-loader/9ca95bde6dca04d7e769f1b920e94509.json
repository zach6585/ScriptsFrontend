{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/moust/Documents/Scripts/frontend/src/components/scripts/script6/pages/page6.js\";\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { patchTexts, postTexts } from '../../../../actions/text';\nimport phone from '../../pictures/phone.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Page6 extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleChange = event => {\n      const object_outcome = this.getObject(event.target.id);\n      object_outcome === \"\" ? this.props.postTexts({\n        value: event.target.value,\n        id_tag: event.target.id,\n        mentee_id: this.props.props.mentee_id,\n        script: '6'\n      }) : this.props.patchTexts({\n        value: event.target.value,\n        id_tag: event.target.id,\n        id: object_outcome.id,\n        mentee_id: this.props.props.mentee_id,\n        script: '6'\n      });\n    };\n\n    this.getObject = current_id_tag => {\n      //Returns the object that has the specific id_tag\n      let current_text = this.props.texts.find(text_item => {\n        return text_item.id_tag === current_id_tag;\n      });\n      return current_text ? current_text : \"\";\n    };\n\n    this.getValue = current_id_tag => {\n      //Same as getObject but instead it returns the value\n      let current_text_for_value = this.props.texts.find(text_item => {\n        return text_item.id_tag === current_id_tag;\n      });\n      return current_text_for_value ? current_text_for_value.value : \"\";\n    };\n  }\n\n  componentDidMount() {\n    window.scroll({\n      top: 0,\n      behavior: 'smooth'\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sheet\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container_for_small_margin\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Step 1: Identify how you are feeling\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 78\n          }, this), \"The purpose of a coping strategy is to help you feel better when you are having challenging, uncomfortable emotions. Sometimes it can be hard to tell how you are feeling.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 195\n          }, this), \"We have been using the body scan worksheet to help you identify your emotions.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 103\n          }, this), \"Let's practice using the body scan worksheet before we practice your coping strategy.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"instruction_box_number_1_page_6_script_6\",\n          className: \"custom_svg demo_box container_for_small_margin\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"top_line_in_instruction_box\",\n            children: [\"Help your mentee use the body scan worksheet or mood log.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 86\n            }, this), \"Put the link in the chat and ask your mentee to screen share\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 89\n            }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Write how your mentee is feeling\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 78\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              onChange: event => this.handleChange(event),\n              id: \"text_box_number_1_page_6_script_6\",\n              defaultValue: this.getValue(\"text_box_number_1_page_6_script_6\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container_for_large_margin\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Now that you figured out how you are feeling, let's practice rating it on the mood log.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"instruction_box_number_2_page_6_script_6\",\n            className: \"custom_svg demo_box container_for_small_margin\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"top_line_in_instruction_box\",\n              children: [\"Help your mentee use the mood log on their phone.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 82\n              }, this), \"Put the link [will insert for each mentee] in the chat and ask your mentee to screen share.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 124\n              }, this), \"If your mentee points to an emoji, but doesn't say a feeling, ask them to describe what the feeling is.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: phone,\n            alt: \"Phone with emojis\",\n            id: \"phone_page_6_script_6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    texts: state.texts.curatedTextsFromCurrentScript,\n    mentee_id: state.mentees.current_mentee_id\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    patchTexts: text_data => dispatch(patchTexts(text_data)),\n    postTexts: text_data => dispatch(postTexts(text_data))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Page6);","map":{"version":3,"sources":["/mnt/c/Users/moust/Documents/Scripts/frontend/src/components/scripts/script6/pages/page6.js"],"names":["Component","connect","patchTexts","postTexts","phone","Page6","handleChange","event","object_outcome","getObject","target","id","props","value","id_tag","mentee_id","script","current_id_tag","current_text","texts","find","text_item","getValue","current_text_for_value","componentDidMount","window","scroll","top","behavior","render","mapStateToProps","state","curatedTextsFromCurrentScript","mentees","current_mentee_id","mapDispatchToProps","dispatch","text_data"],"mappings":"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","sourcesContent":["import { Component } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { patchTexts, postTexts } from '../../../../actions/text';\r\n\r\nimport phone from '../../pictures/phone.png';\r\n\r\nclass Page6 extends Component{\r\n\r\n    componentDidMount() {\r\n        window.scroll({top:0,behavior:'smooth'});\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        const object_outcome = this.getObject(event.target.id)\r\n        object_outcome === \"\" ? \r\n        this.props.postTexts({value: event.target.value, id_tag: event.target.id, mentee_id: this.props.props.mentee_id, script: '6'})\r\n        :\r\n        this.props.patchTexts({value: event.target.value, id_tag: event.target.id, id: object_outcome.id, mentee_id: this.props.props.mentee_id, script: '6'})\r\n\r\n    }\r\n    \r\n    getObject = (current_id_tag) => {\r\n        //Returns the object that has the specific id_tag\r\n        let current_text = this.props.texts.find(text_item => {return text_item.id_tag === current_id_tag})\r\n        return current_text ? current_text : \"\"\r\n    }\r\n\r\n    getValue = (current_id_tag) => {\r\n        //Same as getObject but instead it returns the value\r\n        let current_text_for_value = this.props.texts.find(text_item => {return text_item.id_tag === current_id_tag})\r\n        return current_text_for_value ? current_text_for_value.value : \"\"\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div className=\"sheet\">\r\n                <div className='container_for_small_margin'>\r\n                    <p>\r\n                        <strong>Step 1: Identify how you are feeling</strong><br/>\r\n                        The purpose of a coping strategy is to help you feel better when you are having challenging, uncomfortable emotions. Sometimes it can be hard to tell how you are feeling.<br/>\r\n                        We have been using the body scan worksheet to help you identify your emotions.<br/>\r\n                        Let's practice using the body scan worksheet before we practice your coping strategy. \r\n\r\n                    </p>\r\n                    \r\n                    <div id=\"instruction_box_number_1_page_6_script_6\" className=\"custom_svg demo_box container_for_small_margin\">\r\n                        <p className='top_line_in_instruction_box'>\r\n                            Help your mentee use the body scan worksheet or mood log.<br/>\r\n                            Put the link in the chat and ask your mentee to screen share<br/>\r\n                            <strong>Write how your mentee is feeling</strong><br/>\r\n                            <textarea onChange={event => this.handleChange(event)} id=\"text_box_number_1_page_6_script_6\" defaultValue={this.getValue(\"text_box_number_1_page_6_script_6\")} />\r\n                        </p>\r\n                    </div>\r\n\r\n\r\n                    <div className='container_for_large_margin'>\r\n                        <p>Now that you figured out how you are feeling, let's practice rating it on the mood log.</p>\r\n                        <div id=\"instruction_box_number_2_page_6_script_6\" className='custom_svg demo_box container_for_small_margin'>\r\n                            <p className='top_line_in_instruction_box'>\r\n                                Help your mentee use the mood log on their phone.<br/>\r\n                                Put the link [will insert for each mentee] in the chat and ask your mentee to screen share.<br/>\r\n                                If your mentee points to an emoji, but doesn't say a feeling, ask them to describe what the feeling is. \r\n                            </p>\r\n                        </div>\r\n                        <img src={phone} alt=\"Phone with emojis\" id=\"phone_page_6_script_6\" />\r\n                    </div>\r\n                   \r\n                    \r\n                </div>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        texts: state.texts.curatedTextsFromCurrentScript,\r\n        mentee_id: state.mentees.current_mentee_id\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n        patchTexts: (text_data) => dispatch(patchTexts(text_data)),\r\n        postTexts: (text_data) => dispatch(postTexts(text_data))\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Page6);"]},"metadata":{},"sourceType":"module"}