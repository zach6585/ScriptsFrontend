{"ast":null,"code":"export default function scriptReducer(state, action) {\n  /*\r\n  This reducer will do two things (Based on two separate actions): \r\n  1) Will update the script values saved to the store so that we don't have to make multiple axios calls and \r\n  2) Will give the option (when we ultimately implement the functionality of letting them decide \r\n      to change the script they're working on without reloading the app alltogether) to change which script they're looking at\r\n  Initial state will be the single state chosen by button press.\r\n  */\n  switch (action.type) {\n    case 'script/updated':\n      //Number 1 from above\n\n      /* We need to return, in our action, a newContent value and hopefully this is the way to alter our scripts content \r\n      (Not so sure about the syntax but we'll see) \r\n      */\n      return { ...state,\n        script: { ...state.script,\n          content: action.payload.newContent\n        }\n      };\n    //Here we will have to have given the action a new script value which would be easy to get\n\n    case 'script/changed':\n      //Number 2 from above\n\n      /* We'll need to give our action a newScript value. Until I actually adopt this feature though this is essentially useless. */\n      return { ...state,\n        script: action.payload.newScript\n      };\n\n    default:\n      // If the reducer doesn't care about this action type,\n      // return the existing state unchanged\n      return state;\n  }\n}","map":{"version":3,"sources":["/mnt/c/Users/moust/Documents/Scripts/frontend/src/reducers/scriptreducer.js"],"names":["scriptReducer","state","action","type","script","content","payload","newContent","newScript"],"mappings":"AACA,eAAe,SAASA,aAAT,CAAuBC,KAAvB,EAA8BC,MAA9B,EAAsC;AACjD;AACJ;AACA;AACA;AACA;AACA;AACA;AACI,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,gBAAL;AAAuB;;AACrB;AACR;AACA;AACQ,aAAO,EAAE,GAAGF,KAAL;AAAYG,QAAAA,MAAM,EAAE,EAAC,GAAGH,KAAK,CAACG,MAAV;AAAkBC,UAAAA,OAAO,EAAEH,MAAM,CAACI,OAAP,CAAeC;AAA1C;AAApB,OAAP;AAAmF;;AACrF,SAAK,gBAAL;AAAuB;;AACvB;AACE,aAAO,EAAE,GAAGN,KAAL;AAAYG,QAAAA,MAAM,EAAEF,MAAM,CAACI,OAAP,CAAeE;AAAnC,OAAP;;AACF;AACE;AACA;AACA,aAAOP,KAAP;AAZJ;AAcD","sourcesContent":["\r\nexport default function scriptReducer(state, action) {\r\n    /*\r\n    This reducer will do two things (Based on two separate actions): \r\n    1) Will update the script values saved to the store so that we don't have to make multiple axios calls and \r\n    2) Will give the option (when we ultimately implement the functionality of letting them decide \r\n        to change the script they're working on without reloading the app alltogether) to change which script they're looking at\r\n    Initial state will be the single state chosen by button press.\r\n    */\r\n    switch (action.type) {\r\n      case 'script/updated': //Number 1 from above\r\n        /* We need to return, in our action, a newContent value and hopefully this is the way to alter our scripts content \r\n        (Not so sure about the syntax but we'll see) \r\n        */\r\n        return { ...state, script: {...state.script, content: action.payload.newContent} } //Here we will have to have given the action a new script value which would be easy to get\r\n      case 'script/changed': //Number 2 from above\r\n      /* We'll need to give our action a newScript value. Until I actually adopt this feature though this is essentially useless. */\r\n        return { ...state, script: action.payload.newScript }\r\n      default:\r\n        // If the reducer doesn't care about this action type,\r\n        // return the existing state unchanged\r\n        return state\r\n    }\r\n  }"]},"metadata":{},"sourceType":"module"}