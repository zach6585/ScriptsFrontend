{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/moust/Documents/Scripts/frontend/src/components/scripts/dummy script/pages/generalpage.js\";\nimport { Component } from 'react';\nimport ContentEditable from 'react-contenteditable';\nimport { connect } from 'react-redux';\nimport { submitButtonClicked } from '../../../../actions/pages/submitClicked';\nimport { postOrPatchTexts } from '../../../../actions/text/textChangeAxiosCallAction';\nimport '../../allScripts.css';\nimport larrow from \"../pictures/larrow.png\";\nimport rarrow from \"../pictures/rarrow.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass GeneralPageRenderer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      page: null,\n      page_content: null,\n      submitButton: null,\n      pageNum: 1,\n      texts: this.props.texts\n    };\n\n    this.handleContentClicked = event => {\n      this.setState({\n        submitButton: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: event => this.handleContentEditedSubmit(event),\n          className: \"website_change_submit_button\",\n          children: \"Submit Changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 38\n        }, this)\n      });\n    };\n\n    this.handleContentEditedSubmit = event => {\n      event.preventDefault();\n      this.props.submitButtonClicked({\n        page: this.state.page,\n        content: this.state.page_content\n      });\n      this.setState({\n        submitButton: null\n      });\n    };\n\n    this.handleTextChange = event => {\n      //When the texts change, this is where it goes\n      this.props.postOrPatchTexts({\n        text: this.state.texts,\n        current_text: event.target\n      });\n    };\n\n    this.handleChangeInContentEditable = event => {\n      this.setState({\n        page_content: event.target.value\n      });\n    };\n\n    this.getValue = id => {\n      //Gets the value of the textbox.\n      for (const i in this.state.texts) {\n        if (this.state.texts[i].id_tag === id) {\n          return this.state.texts[i].value;\n        }\n      }\n\n      return \"\";\n    };\n  }\n\n  componentDidMount() {\n    console.log(this.props); //For now, this is set. In the future, we will need to convey some way to suggest that something is changing and thus we will need to \n    //Account for that by way of a reducer/action\n\n    const pageData = this.props.pages.find(page_data => {\n      return page_data.page_number === this.state.pageNum.toString();\n    });\n    console.log(pageData);\n    this.setState({\n      page: pageData,\n      page_content: pageData.content\n    });\n  }\n\n  render() {\n    if (this.state.content === null) {\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(ContentEditable, {\n          onClick: event => this.handleContentClicked(),\n          onChange: event => this.handleChangeInContentEditable(event),\n          html: this.state.page_content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }, this), this.state.submitButton, /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"buttonDiv\",\n          children: [this.state.pagePos === 0 ? null : /*#__PURE__*/_jsxDEV(\"img\", {\n            alt: \"left arrow back\",\n            src: larrow,\n            onClick: () => this.handleClick('b'),\n            className: \"left arrow button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 57\n          }, this), this.state.pagePos === this.props.pages.length - 1 ? null : /*#__PURE__*/_jsxDEV(\"img\", {\n            alt: \"right arrow forward\",\n            src: rarrow,\n            onClick: () => this.handleClick('f'),\n            className: \"right arrow button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 83\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"page_num\",\n          children: this.state.pageNum\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this);\n    }\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    submitButtonClicked: page_details => dispatch(submitButtonClicked(page_details)),\n    postOrPatchTexts: texts_details => dispatch(postOrPatchTexts(texts_details))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(GeneralPageRenderer);\n/* \r\nNotes for this page: Need to make it so that textboxes are ignored for the content editable thing since we need those to be entered.\r\nI can ask Ariel next time I see her which one of my two ideas (which are coming after this) she wants:\r\n1) I pass an argument in to the handleContentClicked function that determines the type of the element so it doesn't proc when on certain things or\r\n2) I make a menu in the top left (Honestly I think ultimately this is what I want since the whole flow would make more sense this way) that\r\ngives the option to make changes so that it isn't just the second you click anywhere\r\n\r\n- If I choose number 2 (which I think I will), I will make it so that there's an if else in the render that determines if it's\r\ncontent editable or not\r\n*/\n\nhandleClick = letter => {\n  //This determines which button was pressed\n  if (letter === 'b') {\n    this.setState(prevState => ({\n      pagePos: prevState.pagePos - 1\n    }));\n  } else {\n    this.setState(prevState => ({\n      pagePos: prevState.pagePos + 1\n    }));\n  }\n};","map":{"version":3,"sources":["/mnt/c/Users/moust/Documents/Scripts/frontend/src/components/scripts/dummy script/pages/generalpage.js"],"names":["Component","ContentEditable","connect","submitButtonClicked","postOrPatchTexts","larrow","rarrow","GeneralPageRenderer","state","page","page_content","submitButton","pageNum","texts","props","handleContentClicked","event","setState","handleContentEditedSubmit","preventDefault","content","handleTextChange","text","current_text","target","handleChangeInContentEditable","value","getValue","id","i","id_tag","componentDidMount","console","log","pageData","pages","find","page_data","page_number","toString","render","pagePos","handleClick","length","mapDispatchToProps","dispatch","page_details","texts_details","letter","prevState"],"mappings":";AAAA,SAAQA,SAAR,QAAwB,OAAxB;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AAEA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,mBAAT,QAAoC,yCAApC;AACA,SAASC,gBAAT,QAAiC,oDAAjC;AACA,OAAO,sBAAP;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;;;AAEA,MAAMC,mBAAN,SAAkCP,SAAlC,CAA2C;AAAA;AAAA;AAAA,SAEvCQ,KAFuC,GAE/B;AACJC,MAAAA,IAAI,EAAE,IADF;AAEJC,MAAAA,YAAY,EAAE,IAFV;AAGJC,MAAAA,YAAY,EAAE,IAHV;AAIJC,MAAAA,OAAO,EAAE,CAJL;AAKJC,MAAAA,KAAK,EAAE,KAAKC,KAAL,CAAWD;AALd,KAF+B;;AAAA,SAkBvCE,oBAlBuC,GAkBfC,KAAD,IAAW;AAC9B,WAAKC,QAAL,CAAc;AAACN,QAAAA,YAAY,eAAE;AAAQ,UAAA,OAAO,EAAEK,KAAK,IAAI,KAAKE,yBAAL,CAA+BF,KAA/B,CAA1B;AAAiE,UAAA,SAAS,EAAC,8BAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAf,OAAd;AACH,KApBsC;;AAAA,SAsBvCE,yBAtBuC,GAsBVF,KAAD,IAAW;AACnCA,MAAAA,KAAK,CAACG,cAAN;AACA,WAAKL,KAAL,CAAWX,mBAAX,CAA+B;AAACM,QAAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC,IAAlB;AAAwBW,QAAAA,OAAO,EAAE,KAAKZ,KAAL,CAAWE;AAA5C,OAA/B;AACA,WAAKO,QAAL,CAAc;AAACN,QAAAA,YAAY,EAAE;AAAf,OAAd;AACH,KA1BsC;;AAAA,SA4BvCU,gBA5BuC,GA4BnBL,KAAD,IAAW;AAC1B;AACA,WAAKF,KAAL,CAAWV,gBAAX,CAA4B;AAACkB,QAAAA,IAAI,EAAE,KAAKd,KAAL,CAAWK,KAAlB;AAAyBU,QAAAA,YAAY,EAAEP,KAAK,CAACQ;AAA7C,OAA5B;AACH,KA/BsC;;AAAA,SAiCvCC,6BAjCuC,GAiCNT,KAAD,IAAW;AACvC,WAAKC,QAAL,CAAc;AAACP,QAAAA,YAAY,EAAEM,KAAK,CAACQ,MAAN,CAAaE;AAA5B,OAAd;AACH,KAnCsC;;AAAA,SAqCvCC,QArCuC,GAqC3BC,EAAD,IAAQ;AACf;AACA,WAAK,MAAMC,CAAX,IAAgB,KAAKrB,KAAL,CAAWK,KAA3B,EAAiC;AAC7B,YAAI,KAAKL,KAAL,CAAWK,KAAX,CAAiBgB,CAAjB,EAAoBC,MAApB,KAA+BF,EAAnC,EAAsC;AAClC,iBAAO,KAAKpB,KAAL,CAAWK,KAAX,CAAiBgB,CAAjB,EAAoBH,KAA3B;AACH;AACJ;;AACD,aAAO,EAAP;AACH,KA7CsC;AAAA;;AASvCK,EAAAA,iBAAiB,GAAE;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKnB,KAAjB,EADe,CAEf;AACA;;AACA,UAAMoB,QAAQ,GAAG,KAAKpB,KAAL,CAAWqB,KAAX,CAAiBC,IAAjB,CAAsBC,SAAS,IAAI;AAAC,aAAOA,SAAS,CAACC,WAAV,KAA0B,KAAK9B,KAAL,CAAWI,OAAX,CAAmB2B,QAAnB,EAAjC;AAA+D,KAAnG,CAAjB;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ;AACA,SAAKjB,QAAL,CAAc;AAACR,MAAAA,IAAI,EAAEyB,QAAP;AAAiBxB,MAAAA,YAAY,EAAEwB,QAAQ,CAACd;AAAxC,KAAd;AACH;;AA+BDoB,EAAAA,MAAM,GAAE;AACJ,QAAI,KAAKhC,KAAL,CAAWY,OAAX,KAAuB,IAA3B,EAAgC;AAC5B,0BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAGH,KAJD,MAKI;AACJ,0BACI;AAAA,gCACI,QAAC,eAAD;AAAiB,UAAA,OAAO,EAAEJ,KAAK,IAAI,KAAKD,oBAAL,EAAnC;AAAgE,UAAA,QAAQ,EAAEC,KAAK,IAAI,KAAKS,6BAAL,CAAmCT,KAAnC,CAAnF;AAA8H,UAAA,IAAI,EAAE,KAAKR,KAAL,CAAWE;AAA/I;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEK,KAAKF,KAAL,CAAWG,YAFhB,eAGI;AAAK,UAAA,EAAE,EAAC,WAAR;AAAA,qBACK,KAAKH,KAAL,CAAWiC,OAAX,KAAuB,CAAvB,GAA2B,IAA3B,gBAAmC;AAAK,YAAA,GAAG,EAAC,iBAAT;AAA2B,YAAA,GAAG,EAAEpC,MAAhC;AAAwC,YAAA,OAAO,EAAE,MAAM,KAAKqC,WAAL,CAAiB,GAAjB,CAAvD;AAA8E,YAAA,SAAS,EAAC;AAAxF;AAAA;AAAA;AAAA;AAAA,kBADxC,EAEK,KAAKlC,KAAL,CAAWiC,OAAX,KAAuB,KAAK3B,KAAL,CAAWqB,KAAX,CAAiBQ,MAAjB,GAA0B,CAAjD,GAAqD,IAArD,gBAA6D;AAAK,YAAA,GAAG,EAAC,qBAAT;AAA+B,YAAA,GAAG,EAAErC,MAApC;AAA4C,YAAA,OAAO,EAAE,MAAM,KAAKoC,WAAL,CAAiB,GAAjB,CAA3D;AAAkF,YAAA,SAAS,EAAC;AAA5F;AAAA;AAAA;AAAA;AAAA,kBAFlE;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAOI;AAAI,UAAA,SAAS,EAAC,UAAd;AAAA,oBAA0B,KAAKlC,KAAL,CAAWI;AAArC;AAAA;AAAA;AAAA;AAAA,gBAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAWC;AACJ;;AAlEsC;;AAqE3C,MAAMgC,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAM;AACF1C,IAAAA,mBAAmB,EAAG2C,YAAD,IAAkBD,QAAQ,CAAC1C,mBAAmB,CAAC2C,YAAD,CAApB,CAD7C;AAEF1C,IAAAA,gBAAgB,EAAG2C,aAAD,IAAmBF,QAAQ,CAACzC,gBAAgB,CAAC2C,aAAD,CAAjB;AAF3C,GAAN;AAIH,CALD;;AASA,eAAe7C,OAAO,CAAC,IAAD,EAAO0C,kBAAP,CAAP,CAAkCrC,mBAAlC,CAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAmC,WAAW,GAAIM,MAAD,IAAY;AAAC;AACvB,MAAIA,MAAM,KAAK,GAAf,EAAmB;AACjB,SAAK/B,QAAL,CAAegC,SAAD,KAAgB;AAACR,MAAAA,OAAO,EAAEQ,SAAS,CAACR,OAAV,GAAoB;AAA9B,KAAhB,CAAd;AACD,GAFD,MAGK;AACH,SAAKxB,QAAL,CAAegC,SAAD,KAAgB;AAACR,MAAAA,OAAO,EAAEQ,SAAS,CAACR,OAAV,GAAoB;AAA9B,KAAhB,CAAd;AACD;AAEF,CARH","sourcesContent":["import {Component} from 'react';\r\nimport ContentEditable from 'react-contenteditable';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { submitButtonClicked } from '../../../../actions/pages/submitClicked';\r\nimport { postOrPatchTexts } from '../../../../actions/text/textChangeAxiosCallAction';\r\nimport '../../allScripts.css';\r\nimport larrow from \"../pictures/larrow.png\";\r\nimport rarrow from \"../pictures/rarrow.png\";\r\n\r\nclass GeneralPageRenderer extends Component{\r\n    \r\n    state = {\r\n        page: null,\r\n        page_content: null,\r\n        submitButton: null,\r\n        pageNum: 1,\r\n        texts: this.props.texts\r\n    }\r\n    componentDidMount(){\r\n        console.log(this.props)\r\n        //For now, this is set. In the future, we will need to convey some way to suggest that something is changing and thus we will need to \r\n        //Account for that by way of a reducer/action\r\n        const pageData = this.props.pages.find(page_data => {return page_data.page_number === this.state.pageNum.toString()})\r\n        console.log(pageData);\r\n        this.setState({page: pageData, page_content: pageData.content})\r\n    }\r\n\r\n    handleContentClicked = (event) => {\r\n        this.setState({submitButton: <button onClick={event => this.handleContentEditedSubmit(event)} className=\"website_change_submit_button\">Submit Changes</button>})\r\n    }\r\n\r\n    handleContentEditedSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.submitButtonClicked({page: this.state.page, content: this.state.page_content});\r\n        this.setState({submitButton: null})\r\n    }\r\n\r\n    handleTextChange = (event) => {\r\n        //When the texts change, this is where it goes\r\n        this.props.postOrPatchTexts({text: this.state.texts, current_text: event.target})\r\n    }\r\n\r\n    handleChangeInContentEditable = (event) => {\r\n        this.setState({page_content: event.target.value})\r\n    }\r\n\r\n    getValue = (id) => {\r\n        //Gets the value of the textbox.\r\n        for (const i in this.state.texts){\r\n            if (this.state.texts[i].id_tag === id){\r\n                return this.state.texts[i].value;\r\n            }\r\n        }\r\n        return \"\"\r\n    }\r\n\r\n    render(){\r\n        if (this.state.content === null){\r\n            return(\r\n                <h1>Loading</h1>\r\n            )\r\n        }\r\n        else{\r\n        return(\r\n            <div>\r\n                <ContentEditable onClick={event => this.handleContentClicked()} onChange={event => this.handleChangeInContentEditable(event)} html={this.state.page_content} />\r\n                {this.state.submitButton}\r\n                <div id=\"buttonDiv\">\r\n                    {this.state.pagePos === 0 ? null :  <img alt=\"left arrow back\" src={larrow} onClick={() => this.handleClick('b')} className=\"left arrow button\"/>}\r\n                    {this.state.pagePos === this.props.pages.length - 1 ? null :  <img alt=\"right arrow forward\" src={rarrow} onClick={() => this.handleClick('f')} className=\"right arrow button\"/>}\r\n                </div>\r\n                <h3 className=\"page_num\">{this.state.pageNum}</h3>\r\n            </div>\r\n        )\r\n        }\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        submitButtonClicked: (page_details) => dispatch(submitButtonClicked(page_details)),\r\n        postOrPatchTexts: (texts_details) => dispatch(postOrPatchTexts(texts_details))\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(GeneralPageRenderer);\r\n\r\n/* \r\nNotes for this page: Need to make it so that textboxes are ignored for the content editable thing since we need those to be entered.\r\nI can ask Ariel next time I see her which one of my two ideas (which are coming after this) she wants:\r\n1) I pass an argument in to the handleContentClicked function that determines the type of the element so it doesn't proc when on certain things or\r\n2) I make a menu in the top left (Honestly I think ultimately this is what I want since the whole flow would make more sense this way) that\r\ngives the option to make changes so that it isn't just the second you click anywhere\r\n\r\n- If I choose number 2 (which I think I will), I will make it so that there's an if else in the render that determines if it's\r\ncontent editable or not\r\n*/\r\n\r\nhandleClick = (letter) => {//This determines which button was pressed\r\n    if (letter === 'b'){\r\n      this.setState((prevState) => ({pagePos: prevState.pagePos - 1}))\r\n    }\r\n    else {\r\n      this.setState((prevState) => ({pagePos: prevState.pagePos + 1}))\r\n    }\r\n    \r\n  }\r\n\r\n  "]},"metadata":{},"sourceType":"module"}